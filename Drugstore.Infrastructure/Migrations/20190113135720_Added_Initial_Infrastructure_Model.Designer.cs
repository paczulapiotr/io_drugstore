// <auto-generated />
using System;
using Drugstore.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Drugstore.Infrastructure.Migrations
{
    [DbContext(typeof(DrugstoreDbContext))]
    [Migration("20190113135720_Added_Initial_Infrastructure_Model")]
    partial class Added_Initial_Infrastructure_Model
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Drugstore.Core.AssignedMedicine", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AssignedQuantity");

                    b.Property<int?>("MedicalPrescriptionID");

                    b.Property<int?>("StockMedicineID");

                    b.HasKey("ID");

                    b.HasIndex("MedicalPrescriptionID");

                    b.HasIndex("StockMedicineID");

                    b.ToTable("AssignedMedicines");
                });

            modelBuilder.Entity("Drugstore.Core.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Drugstore.Core.Doctor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepartmentID");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("SecondName")
                        .HasMaxLength(50);

                    b.Property<int>("SystemUserID");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Drugstore.Core.MedicalPrescription", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("DoctorID");

                    b.Property<int>("PatientID");

                    b.HasKey("ID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("MedicalPrescriptions");
                });

            modelBuilder.Entity("Drugstore.Core.MedicineOnStock", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRefunded");

                    b.Property<int>("MedicineCategory");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<float>("PricePerOne");

                    b.Property<long>("Quantity");

                    b.HasKey("ID");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("Drugstore.Core.Nurse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepartmentID");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("SecondName")
                        .HasMaxLength(50);

                    b.Property<int>("SystemUserID");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Nurses");
                });

            modelBuilder.Entity("Drugstore.Core.Patient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepartmentID");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("SecondName")
                        .HasMaxLength(50);

                    b.Property<int>("SystemUserID");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Drugstore.Core.AssignedMedicine", b =>
                {
                    b.HasOne("Drugstore.Core.MedicalPrescription")
                        .WithMany("Medicines")
                        .HasForeignKey("MedicalPrescriptionID");

                    b.HasOne("Drugstore.Core.MedicineOnStock", "StockMedicine")
                        .WithMany()
                        .HasForeignKey("StockMedicineID");
                });

            modelBuilder.Entity("Drugstore.Core.Doctor", b =>
                {
                    b.HasOne("Drugstore.Core.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");
                });

            modelBuilder.Entity("Drugstore.Core.MedicalPrescription", b =>
                {
                    b.HasOne("Drugstore.Core.Doctor", "Doctor")
                        .WithMany("IssuedPresciptions")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Drugstore.Core.Patient", "Patient")
                        .WithMany("TreatmentHistory")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Drugstore.Core.Nurse", b =>
                {
                    b.HasOne("Drugstore.Core.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");
                });

            modelBuilder.Entity("Drugstore.Core.Patient", b =>
                {
                    b.HasOne("Drugstore.Core.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");
                });
#pragma warning restore 612, 618
        }
    }
}
